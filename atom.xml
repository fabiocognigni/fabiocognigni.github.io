<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[]]></title>
  <link href="http://fabiocognigni.github.io/atom.xml" rel="self"/>
  <link href="http://fabiocognigni.github.io/"/>
  <updated>2015-06-20T14:17:04+01:00</updated>
  <id>http://fabiocognigni.github.io/</id>
  <author>
    <name><![CDATA[Fabero]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Agile documentation, logging and metrics]]></title>
    <link href="http://fabiocognigni.github.io/blog/2014/09/06/agile-documentation/"/>
    <updated>2014-09-06T23:27:09+01:00</updated>
    <id>http://fabiocognigni.github.io/blog/2014/09/06/agile-documentation</id>
    <content type="html"><![CDATA[<p>Tight, hard deadlines on critical projects are not fun to deal with but fortunately an <strong>Agile process</strong> is a huge help to deliver timely while giving the whole team (and all upperloards!) visibility on progresses.</p>

<p>But still these are the occasions when you tend to leave behind some important aspects: documentation, accurate logging and metrics to have visibility on how the system performs.</p>

<p>So all that happiness for having delivered your project in time (or ahead of time!) has to immediately leave space to a not so exciting week (or more that a week) spent adding <a href="http://fabiocognigni.github.io/blog/2014/06/07/logging/">accurate logging</a>, metrics on performances, load handled, analytics and writing documentation for all the functionalities (worst case, textual documentation; best case, swagger in case of Restful APIs).</p>

<!--more-->


<p>A great way not to get there was for me applying a process that can be summarized with the below points:</p>

<ol>
<li>pick a new story from the team wall;</li>
<li>TDD to implement the new feature;</li>
<li>add system metrics recording (execution times, hit counters, error counters, &hellip;);</li>
<li>add &ldquo;business&rdquo; metrics/analytics (e.g. total amount for an order processed, credit card type used, orders with promotions, &hellip;);</li>
<li>add the documentation (not the in-line code doc but final-user doc) on the new feature and update parts of the existing documentation if needed to keep it consistent;</li>
<li>open a PR;</li>
<li>have it reviewed (note that having added documentation, logging and metrics makes reviewer life much easier);</li>
<li>merge to trunk (or to the long term development environment);</li>
<li>move the story to &ldquo;dev complete&rdquo;;</li>
<li>QA work will also include check the logs and metrics added;</li>
</ol>


<p>The advantages of this approach are the followings:
* better quality and more accurate documentation just because you write it right after you implemented a specific piece and you then have all the details fresh in mind;
* same for adding meaningful logging and recording useful metrics;
* at any point in time everything done so far is well documented and this <strong>facilitates on-boarding of new team members</strong> joining in the middle of the project.</p>

<p>The begin can be tough but then they become natural steps of the entire process leading to greater quality and much better team-working.</p>

<p>In case documentation is not needed because the new feature is something to be used internally in your organization, good for you, but still an accurate description of your work (in addition to in-line code documentation, when needed) is always a good practice.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[logging]]></title>
    <link href="http://fabiocognigni.github.io/blog/2014/06/07/logging/"/>
    <updated>2014-06-07T12:49:07+01:00</updated>
    <id>http://fabiocognigni.github.io/blog/2014/06/07/logging</id>
    <content type="html"><![CDATA[<p>Logs are one of the few ways to observe how your system is behaving at runtime and an invaluable help to troubleshoot issues so you better want to organize them properly.</p>

<p>Having too chatty logs means having lots of visibility but also struggling to find what you are really looking for (even with awesome tools like Splunk and Elastic search that have to index too much data).</p>

<p>Beyond the obvious common sense rules to choose at which logging level you should log a certain event/data, here  they are few best practices that worked really well in my experience.</p>

<!--more-->


<h3>Logging input and output data</h3>

<p>I use to log all the data coming in and all results produced at <strong>DEBUG</strong> level.</p>

<p>This makes these verbose logs normally not being produced (keeping the default at <strong>INFO</strong>) but still available by (temporarily) lowering the log level to DEBUG when you &ldquo;smell&rdquo; the system is not behaving properly.</p>

<p>This turns out to be very helpful to investigate issues since it provides you directly the input data to reproduce a production issue in a test environment.</p>

<p>For example I used this approach in a suite of REST APIs for validation and processing of orders: I am logging at <strong>DEBUG level</strong> <strong>all the API HTTP request and responses</strong> contents and also all the request/responses when this system makes any external call to other services.</p>

<p>Ah! Don&rsquo;t forget to make sure you <strong>obfuscate</strong> any <strong>sensitive data</strong> if they are present: credit cards info, passwords, etc&hellip; .</p>

<h3>Logging errors</h3>

<p>Please never do this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="k">try</span><span class="o">{</span>
</span><span class='line'>  <span class="o">...</span>
</span><span class='line'><span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">YourException</span> <span class="n">exc</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">LOGGER</span><span class="o">.</span><span class="na">error</span><span class="o">(</span><span class="s">&quot;An error happened!&quot;</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>A bit better (at least you&rsquo;ll have the complete stack trace of the exception):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="k">try</span><span class="o">{</span>
</span><span class='line'>  <span class="o">...</span>
</span><span class='line'><span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">YourException</span> <span class="n">exc</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">LOGGER</span><span class="o">.</span><span class="na">error</span><span class="o">(</span><span class="s">&quot;An error happened!&quot;</span><span class="o">,</span> <span class="n">exc</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Much better (you&rsquo;ll be able to see the full stack trace of the exception and data that caused it):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="k">try</span><span class="o">{</span>
</span><span class='line'>  <span class="o">...</span>
</span><span class='line'><span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">YourException</span> <span class="n">exc</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">LOGGER</span><span class="o">.</span><span class="na">error</span><span class="o">(</span><span class="s">&quot;An error happened while processing: &quot;</span> <span class="o">+</span> <span class="n">inputData</span><span class="o">,</span> <span class="n">exc</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>To summarize: when you are handling an error in your code always make sure:</p>

<ul>
<li>log it at <strong>ERROR</strong> level;</li>
<li>log the complete stack trace of the error;</li>
<li>log <strong>any data in scope at that point of execution</strong>: this will be a huge help to be able to reproduce the issue.</li>
</ul>


<h3>Changing log level dynamically</h3>

<p>Logging libraries like Logback (and Log4J too) lets you <strong>change log level at runtime</strong> without having to bring down and restart the application.</p>

<p>That is a very powerful feature you can use for example to turn the log level to DEBUG when an application running in production is not behaving as expected but it is not throwing any error. Also, you can do that for the all application (root logger) or just for a specific package or even for a specific class only.</p>

<p>The ways you can expose this operation can be different and depends on the type of application you are working on: just a restricted access web page can be enough or I also used to implement a specific HTTP endpoint when the application consisted of a REST service.</p>

<h3>Use conventions on the format</h3>

<p>If you use conventions on how you log domain specific data and errors it will be much easier to retrieve them (both for a human and for automated indexing systems).</p>

<p>For example if I&rsquo;m logging the responses for a suite of REST APIs I better use the same format for all the endpoints where I&rsquo;m doing that: for example something like: <code>"Response " - endpoint name - http status code - body</code>.</p>

<h3>Keep logs and metrics separate</h3>

<p>Leave out from log files what actually represents more <strong>metrics</strong> and/or <strong>analytics</strong> data: they should be handled using more powerful tools (for example <strong>StatsD/Graphite</strong>) to aggregate and visualize them &ndash; talking about this would require another post.</p>

<p>Examples of this data are hit counters, error counters, execution times, order amounts, &hellip; .</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Q&A with Martin Odersky at HBC Digital]]></title>
    <link href="http://fabiocognigni.github.io/blog/2014/05/21/qa-martin-odersky/"/>
    <updated>2014-05-21T15:15:06+01:00</updated>
    <id>http://fabiocognigni.github.io/blog/2014/05/21/qa-martin-odersky</id>
    <content type="html"><![CDATA[<p>Big day here at <a href="https://twitter.com/hbcdigital">HBC Digital</a>: we hosted a Q&amp;A session with Martin Odersky at our offices in NYC.</p>

<p>When you have only one hour you have to choose really well the questions to ask among the hundreds you would have.
An important thing to keep in mind is that you are not talking with another web developer but with a &ldquo;compiler guy&rdquo; (as he defined himself). Indeed as you probably know already he wrote the compilers for modula 2, modula 3 &hellip; up to the javac Java compiler before writing Scala.
More in general it is quite impressive how he was able to apply a solid academic analysis approach to real industrial problems.</p>

<p>I think we did a pretty good job in using that limited amount of time driving the discussion on &ldquo;hot&rdquo; topics like coding philosophies, functional and object-oriented programming coexistence, comparisons with other emerging languages, Java 8 and performances.</p>

<p>Personally I didn&rsquo;t resist the temptation to use this occasion in the most constructive way: not celebrating things I like in <strong>Scala</strong> but pointing out perplexities and limits around it.</p>

<p>Here a summary of the conversation.</p>

<!--more-->


<h3>Functional and OO programming: do they make sense together?</h3>

<p>The first question was about my perplexities on the coexistence between <strong>functional</strong> and <strong>object-oriented</strong> programming. On one side functions and <strong>immutability</strong> drives you on the correct direction of keeping less state as possible and avoid side effects, on the other a construct like an object that implicitly, silently and constantly brings you to tend recreating the same issues. His answer still didn&rsquo;t convince me 100% but it makes sense: the object constructs help you organize your software in modules (but is this so much different from a namespace of pure functions?) to better handle the complexity of <strong>large systems</strong>.</p>

<h3>Scala performances</h3>

<p>My second question was around the well-know pain point of Scala: <strong>performances</strong>! I asked what exactly are the technical reasons that make the Scala compiler not that performant and I also asked for tips (if any!) around writing Scala functional code able to perform well at runtime.
His answer for the compiler performances was an incredibly interesting trip under the hood: cool Scala features like <strong>type inference</strong>, <strong>implicits</strong>, <strong>closures</strong> are objectively and inevitably expensive for the compiler that needs to resolve to the appropriate type (or value in the case of closures) in scope. He also pointed out that <strong>compiler</strong> performances have been already improved a lot recently and this optimization is still a big priority including incremental compilation. Regarding runtime performances some tips are again the same you should have been using since you were a Java programmer: e.g. use arrays and primitive types when possible &ndash; <strong>boxing</strong>/<strong>unboxing</strong> are not cheap operations. The other tips are more Scala/functional specific: use always <strong>tail recursion</strong> when possible (and help the compiler with @tailrec annotation) and take advantage from the fact that in a world of functions you can do lot of caching.</p>

<h3>Scala (not so simple) type system</h3>

<p>Another interesting and prickly question was around the fact that Scala is supposed to simplify coding through immutability and functional support but it has aspects that makes it not that simple: first of all its <strong>super detailed type system</strong>. It was also mentioned the project Dotty. He admits that the Scala type system is not small but he argued that having specialized types has obvious advantages and helps even more in the direction of type safety.</p>

<h3>Scala compared with other functional languages</h3>

<p>Dr. Odersky was then inquired regarding comparison with languages like <strong>Clojure</strong>: in here he mentioned again the importance of having object-oriented approach to have an easier modularization and have a <strong>static typing</strong> to have the compiler doing type checking and introduce as less errors as possible at runtime.</p>

<h3>Coding styles</h3>

<p>I liked also the discussion around the fact that currently it&rsquo;s hard to find in all the Scala code that you can read around a prevalent <strong>style of coding</strong>. This might be due to two factors in his opinion (totally agreed): the most obvious that is still a &ldquo;young&rdquo; language that looks really intriguing but it also take a while to be mastered. The second factor is that it leaves the programmer a broad horizon of choices given its mixed nature object-oriented/functional.</p>

<h3>Scala and Java 8</h3>

<p>The last point I want to report is his opinion about the fact that Java is finally moving in the direction Scala took long time ago, mainly for its support of <strong>lambda expressions</strong> and how the paths of Java and Scala will proceed in the long term. After joking on the fact that as of now almost only C++ was the language with no lambda expression other than Java, he pointed out how still Scala has a lot bigger conceptual space than lambda expressions mentioning the fact that in Scala <strong>functions</strong> have a <strong>type</strong>, Scala has <strong>implicits</strong>, multiple inheritance with mixin <strong>traits</strong>, <strong>pattern matching</strong> with <strong>case classes</strong>, etc. He also explained that according to the current roadmap a full support of Java 8 should be implemented in around one year (with Scala 2.12) even if probably Scala will maintain its own syntax for lambda expressions but overall performances will improve and their integration work Scala-Java will be much easier.</p>

<p>These were just some highlights of a very interesting discussion that was an extremely useful checkpoint of where we are in this JVM ecosystem and what are the possible lines of evolutions for the future.</p>

<p>Things like this definitely <strong>makes your day</strong>!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[welcome]]></title>
    <link href="http://fabiocognigni.github.io/blog/2014/05/19/welcome/"/>
    <updated>2014-05-19T17:51:19+01:00</updated>
    <id>http://fabiocognigni.github.io/blog/2014/05/19/welcome</id>
    <content type="html"><![CDATA[<p>Why this blog?</p>

<p>Basically because if you love Open Source it means you love sharing your code but also the experiences (good and bad!) behind it, tips, lessons learned &hellip; and a blog is a great way to do so!</p>
]]></content>
  </entry>
  
</feed>
